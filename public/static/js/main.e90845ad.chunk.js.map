{"version":3,"sources":["serviceWorker.js","components/voicemailTableHeader.jsx","components/voicemailTableBody.jsx","components/voicemailTable.jsx","components/voicemailcard.jsx","components/voicemail.jsx","components/vmBox.jsx","components/router.jsx","index.js"],"names":["Boolean","window","location","hostname","match","VoicemailTableHeader","columns","TableHead","TableRow","map","column","TableCell","key","generateTableHeader","VoicemailTableBody","TableBody","this","props","voicemails","voicemail","status","handleChange","TimeFormat","require","call_id","onSubmit","event","className","name","defaultValue","folder","placeholder","s","i","value","type","from","to","fromMs","length","renderInformation","Component","VoicemailTable","Table","aria-label","VoicemailCard","cardTitle","style","color","Grid","Voicemail","state","e","a","preventDefault","currentTarget","setAttribute","vmBoxes","index","indexOf","setState","Axios","get","media_id","removeAttribute","vm","id","data","vmBox","VmBox","console","log","class","scope","textDecoration","pathname","messages","Router","path","component","exact","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e90845ad.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nconst generateTableHeader = (column) => {\r\n  return <TableCell key={column}>{column}</TableCell>;\r\n};\r\nconst VoicemailTableHeader = ({ columns }) => {\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {columns.map((column) => generateTableHeader(column))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n};\r\n\r\nexport default VoicemailTableHeader;\r\n","import React, { Component } from \"react\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\n\r\nconst renderInformation = (voicemail, status, handleChange) => {\r\n  var TimeFormat = require(\"hh-mm-ss\");\r\n  return (\r\n    <TableRow key={voicemail.call_id}>\r\n      <TableCell>\r\n        <form onSubmit={(event) => handleChange(event, voicemail)}>\r\n          <select\r\n            className=\"form-control\"\r\n            name=\"status\"\r\n            defaultValue={voicemail.folder}\r\n            placeholder=\"Select Status\"\r\n          >\r\n            {status.map((s, i) => (\r\n              <option key={i} value={s}>\r\n                {s}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          <button type=\"submit\" className=\"btn btn-sm btn-outline-success m-2\">\r\n            Change Status\r\n          </button>\r\n        </form>\r\n      </TableCell>\r\n      <TableCell>{voicemail.from}</TableCell>\r\n      <TableCell>{voicemail.to}</TableCell>\r\n      <TableCell>{TimeFormat.fromMs(voicemail.length, \"hh:mm:ss\")}</TableCell>\r\n    </TableRow>\r\n  );\r\n};\r\n\r\nclass VoicemailTableBody extends Component {\r\n  render() {\r\n    return (\r\n      <TableBody>\r\n        {this.props.voicemails\r\n          ? this.props.voicemails.map((voicemail) =>\r\n              renderInformation(\r\n                voicemail,\r\n                this.props.status,\r\n                this.props.handleChange\r\n              )\r\n            )\r\n          : null}\r\n      </TableBody>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VoicemailTableBody;\r\n","import React from \"react\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport VoicemailTableHeader from \"./voicemailTableHeader\";\r\nimport VoicemailTableBody from \"./voicemailTableBody\";\r\nconst VoicemailTable = ({ columns, voicemails, status, handleChange }) => {\r\n  return (\r\n    <Table aria-label=\"simple table\">\r\n      <VoicemailTableHeader columns={columns} />\r\n      <VoicemailTableBody\r\n        voicemails={voicemails}\r\n        status={status}\r\n        handleChange={handleChange}\r\n      />\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default VoicemailTable;\r\n","import React from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport VoicemailTable from \"./voicemailTable\";\r\nconst VoicemailCard = ({ cardTitle, voicemails, status, handleChange }) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"card\">\r\n        <div\r\n          className=\"card-header text-center  bg-primary\"\r\n          style={{ color: \"white\" }}\r\n        >\r\n          {cardTitle}\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <Grid>\r\n            <VoicemailTable\r\n              columns={[\"status\", \"from\", \"to\", \"duration (hh:mm:ss)\"]}\r\n              voicemails={voicemails}\r\n              status={status}\r\n              handleChange={handleChange}\r\n            />\r\n          </Grid>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VoicemailCard;\r\n","import React, { Component } from \"react\";\r\n\r\nimport VoicemailCard from \"./voicemailcard\";\r\nimport Axios from \"axios\";\r\nclass Voicemail extends Component {\r\n  state = {\r\n    voicemails: [],\r\n    status: [\"new\", \"saved\", \"deleted\"],\r\n  };\r\n\r\n  handleChange = async (e, voicemail) => {\r\n    e.preventDefault();\r\n    const status = e.currentTarget.status;\r\n    status.setAttribute(\"disabled\", true);\r\n    const vmBoxes = [...this.state.voicemails];\r\n    const index = vmBoxes.indexOf(voicemail);\r\n    voicemail.folder = e.currentTarget.status.value;\r\n    vmBoxes[index] = voicemail;\r\n    this.setState({ voicemails: vmBoxes });\r\n    const data = await Axios.get(\r\n      `/voicemailMessage/${vmBoxes[index].media_id}/${vmBoxes[index].folder}`\r\n    );\r\n    status.removeAttribute(\"disabled\");\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const { data: voicemails } = await Axios.get(\r\n      \"/listVoicemail/\" + this.props.location.state.vm.id\r\n    );\r\n    const vmBox = voicemails;\r\n    this.setState({ voicemails: vmBox });\r\n  }\r\n  render() {\r\n    return (\r\n      <VoicemailCard\r\n        cardTitle={\"List of Voicemails\"}\r\n        voicemails={this.state.voicemails}\r\n        status={this.state.status}\r\n        handleChange={this.handleChange}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Voicemail;\r\n","import React, { Component } from \"react\";\r\nimport Axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nclass VmBox extends Component {\r\n  state = {\r\n    vmBoxes: [],\r\n  };\r\n  async componentDidMount() {\r\n    const { data: vmBoxes } = await Axios.get(\"/selectVmBox\");\r\n    this.setState({ vmBoxes: vmBoxes.data });\r\n    console.log(this.state.vmBoxes);\r\n  }\r\n  render() {\r\n    return (\r\n      <form>\r\n        <table class=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\"></th>\r\n              <th scope=\"col\">Name</th>\r\n              <th scope=\"col\">Messages</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.vmBoxes.map((vm) => (\r\n              <tr key={vm.id}>\r\n                <td>\r\n                  <Link\r\n                    className=\"btn btn-md btn-outline-secondary\"\r\n                    style={{ textDecoration: \"none\" }}\r\n                    to={{\r\n                      pathname: `/MessageList/${vm.id}`,\r\n                      state: { vm },\r\n                    }}\r\n                  >\r\n                    Show Messages\r\n                  </Link>\r\n                </td>\r\n                <td>{vm.name}</td>\r\n                <td>{vm.messages}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VmBox;\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport Voicemail from \"./voicemail\";\r\nimport VmBox from \"./vmBox\";\r\nclass Router extends Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route path=\"/MessageList/:vmBoxId\" component={Voicemail} />\r\n          <Route exact path=\"/\" component={VmBox} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Router;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport Router from \"./components/router\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}